local OPTIMIZE_GAME = true -- Set to true to optimize the game by removing unnecessary parts
local DIGSITE_RESET_DELAY = 5 -- Amount of time in seconds to wait before starting the script back up after the digsite resets
local CHEST_BREAK_DELAY = 1 -- Amount of time in seconds to wait before breaking a chest
local DIG_DEPTH = 120
local UNBROKEN_BLOCK_THRESHOLD = 250







-- SCRIPT STARTS BELOW --

local digsiteReset = false

local positions = {
    [1] = Vector3.new(14, 1, 3),
    [2] = Vector3.new(14, 1, 9),
    [3] = Vector3.new(14, 1, 14),
    [4] = Vector3.new(8, 1, 3),
    [5] = Vector3.new(8, 1, 9),
    [6] = Vector3.new(8, 1, 14),
    [7] = Vector3.new(3, 1, 3),
    [8] = Vector3.new(3, 1, 9),
    [9] = Vector3.new(3, 1, 14)
}

local function checkForChests()
    for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.AdvancedDigsite.Important.ActiveChests:GetChildren()) do
        if v:IsA("Model") then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Top.CFrame
            task.wait(CHEST_BREAK_DELAY)
            game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigChest", v:GetAttribute('Coord'))
            v:Destroy()
            task.wait(2)
        end
    end
end
